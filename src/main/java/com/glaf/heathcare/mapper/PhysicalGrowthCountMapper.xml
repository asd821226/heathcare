<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.glaf.heathcare.mapper.PhysicalGrowthCountMapper">

	<resultMap id="physicalGrowthCountResultMap"
		type="com.glaf.heathcare.domain.PhysicalGrowthCount">
		<id property="id" column="ID_" jdbcType="BIGINT" />
		<result property="checkId" column="CHECKID_" jdbcType="VARCHAR" />
		<result property="tenantId" column="TENANTID_"
			jdbcType="VARCHAR" />
		<result property="gradeId" column="GRADEID_" jdbcType="VARCHAR" />
		<result property="item" column="ITEM_" jdbcType="VARCHAR" />
		<result property="standard" column="STANDARD_"
			jdbcType="VARCHAR" />
		<result property="type" column="TYPE_" jdbcType="VARCHAR" />
		<result property="level1" column="LEVEL1_" jdbcType="INTEGER" />
		<result property="level2" column="LEVEL2_" jdbcType="INTEGER" />
		<result property="level3" column="LEVEL3_" jdbcType="INTEGER" />
		<result property="level5" column="LEVEL5_" jdbcType="INTEGER" />
		<result property="level7" column="LEVEL7_" jdbcType="INTEGER" />
		<result property="level8" column="LEVEL8_" jdbcType="INTEGER" />
		<result property="level9" column="LEVEL9_" jdbcType="INTEGER" />
		<result property="level1Percent" column="LEVEL1PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level2Percent" column="LEVEL2PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level3Percent" column="LEVEL3PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level5Percent" column="LEVEL5PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level7Percent" column="LEVEL7PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level8Percent" column="LEVEL8PERCENT_"
			jdbcType="DOUBLE" />
		<result property="level9Percent" column="LEVEL9PERCENT_"
			jdbcType="DOUBLE" />
		<result property="normal" column="NORMAL_" jdbcType="INTEGER" />
		<result property="normalPercent" column="NORMALPERCENT_"
			jdbcType="DOUBLE" />
		<result property="year" column="YEAR_" jdbcType="INTEGER" />
		<result property="month" column="MONTH_" jdbcType="INTEGER" />
	</resultMap>


	<insert id="insertPhysicalGrowthCount"
		parameterType="com.glaf.heathcare.domain.PhysicalGrowthCount">
		insert into HEALTH_PHYSICAL_GROWTH_COUNT
		<trim prefix="(" suffix=")" suffixOverrides=",">
			ID_
			<if test="checkId != null">
				,CHECKID_
			</if>
			<if test="tenantId != null">
				,TENANTID_
			</if>
			<if test="gradeId != null">
				,GRADEID_
			</if>
			<if test="item != null">
				,ITEM_
			</if>
			<if test="standard != null">
				,STANDARD_
			</if>
			<if test="type != null">
				,TYPE_
			</if>
			<if test="level1 != null">
				,LEVEL1_
			</if>
			<if test="level2 != null">
				,LEVEL2_
			</if>
			<if test="level3 != null">
				,LEVEL3_
			</if>
			<if test="level5 != null">
				,LEVEL5_
			</if>
			<if test="level7 != null">
				,LEVEL7_
			</if>
			<if test="level8 != null">
				,LEVEL8_
			</if>
			<if test="level9 != null">
				,LEVEL9_
			</if>
			<if test="level1Percent != null">
				,LEVEL1PERCENT_
			</if>
			<if test="level2Percent != null">
				,LEVEL2PERCENT_
			</if>
			<if test="level3Percent != null">
				,LEVEL3PERCENT_
			</if>
			<if test="level5Percent != null">
				,LEVEL5PERCENT_
			</if>
			<if test="level7Percent != null">
				,LEVEL7PERCENT_
			</if>
			<if test="level8Percent != null">
				,LEVEL8PERCENT_
			</if>
			<if test="level9Percent != null">
				,LEVEL9PERCENT_
			</if>
			<if test="normal != null">
				,NORMAL_
			</if>
			<if test="normalPercent != null">
				,NORMALPERCENT_
			</if>
			<if test="year != null">
				,YEAR_
			</if>
			<if test="month != null">
				,MONTH_
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			#{id, jdbcType=BIGINT}

			<if test="checkId != null">
				,#{checkId, jdbcType=VARCHAR}
			</if>
			<if test="tenantId != null">
				,#{tenantId, jdbcType=VARCHAR}
			</if>
			<if test="gradeId != null">
				,#{gradeId, jdbcType=VARCHAR}
			</if>
			<if test="item != null">
				,#{item, jdbcType=VARCHAR}
			</if>
			<if test="standard != null">
				,#{standard, jdbcType=VARCHAR}
			</if>
			<if test="type != null">
				,#{type, jdbcType=VARCHAR}
			</if>
			<if test="level1 != null">
				,#{level1, jdbcType=INTEGER}
			</if>
			<if test="level2 != null">
				,#{level2, jdbcType=INTEGER}
			</if>
			<if test="level3 != null">
				,#{level3, jdbcType=INTEGER}
			</if>
			<if test="level5 != null">
				,#{level5, jdbcType=INTEGER}
			</if>
			<if test="level7 != null">
				,#{level7, jdbcType=INTEGER}
			</if>
			<if test="level8 != null">
				,#{level8, jdbcType=INTEGER}
			</if>
			<if test="level9 != null">
				,#{level9, jdbcType=INTEGER}
			</if>
			<if test="level1Percent != null">
				,#{level1Percent, jdbcType=DOUBLE}
			</if>
			<if test="level2Percent != null">
				,#{level2Percent, jdbcType=DOUBLE}
			</if>
			<if test="level3Percent != null">
				,#{level3Percent, jdbcType=DOUBLE}
			</if>
			<if test="level5Percent != null">
				,#{level5Percent, jdbcType=DOUBLE}
			</if>
			<if test="level7Percent != null">
				,#{level7Percent, jdbcType=DOUBLE}
			</if>
			<if test="level8Percent != null">
				,#{level8Percent, jdbcType=DOUBLE}
			</if>
			<if test="level9Percent != null">
				,#{level9Percent, jdbcType=DOUBLE}
			</if>
			<if test="normal != null">
				,#{normal, jdbcType=INTEGER}
			</if>
			<if test="normalPercent != null">
				,#{normalPercent, jdbcType=DOUBLE}
			</if>
			<if test="year != null">
				,#{year, jdbcType=INTEGER}
			</if>
			<if test="month != null">
				,#{month, jdbcType=INTEGER}
			</if>
		</trim>
	</insert>


	<insert id="bulkInsertPhysicalGrowthCount"
		parameterType="java.util.List">
		insert into HEALTH_PHYSICAL_GROWTH_COUNT (
		ID_
		,CHECKID_
		,TENANTID_
		,GRADEID_
		,ITEM_
		,STANDARD_
		,TYPE_
		,LEVEL1_
		,LEVEL2_
		,LEVEL3_
		,LEVEL5_
		,LEVEL7_
		,LEVEL8_
		,LEVEL9_
		,LEVEL1PERCENT_
		,LEVEL2PERCENT_
		,LEVEL3PERCENT_
		,LEVEL5PERCENT_
		,LEVEL7PERCENT_
		,LEVEL8PERCENT_
		,LEVEL9PERCENT_
		,NORMAL_
		,NORMALPERCENT_
		,YEAR_
		,MONTH_
		)
		values
		<foreach collection="list" item="physicalGrowthCount"
			index="index" separator=",">
			(
			#{physicalGrowthCount.id, jdbcType=BIGINT}
			,#{physicalGrowthCount.checkId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.tenantId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.gradeId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.item, jdbcType=VARCHAR}
			,#{physicalGrowthCount.standard, jdbcType=VARCHAR}
			,#{physicalGrowthCount.type, jdbcType=VARCHAR}
			,#{physicalGrowthCount.level1, jdbcType=INTEGER}
			,#{physicalGrowthCount.level2, jdbcType=INTEGER}
			,#{physicalGrowthCount.level3, jdbcType=INTEGER}
			,#{physicalGrowthCount.level5, jdbcType=INTEGER}
			,#{physicalGrowthCount.level7, jdbcType=INTEGER}
			,#{physicalGrowthCount.level8, jdbcType=INTEGER}
			,#{physicalGrowthCount.level9, jdbcType=INTEGER}
			,#{physicalGrowthCount.level1Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level2Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level3Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level5Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level7Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level8Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level9Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.normal, jdbcType=INTEGER}
			,#{physicalGrowthCount.normalPercent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.year, jdbcType=INTEGER}
			,#{physicalGrowthCount.month, jdbcType=INTEGER}
			)
		</foreach>
	</insert>


	<insert id="bulkInsertPhysicalGrowthCount_oracle"
		parameterType="java.util.List">
		INSERT ALL
		<foreach collection="list" item="physicalGrowthCount"
			index="index">
			insert into HEALTH_PHYSICAL_GROWTH_COUNT (
			ID_
			,CHECKID_
			,TENANTID_
			,GRADEID_
			,ITEM_
			,STANDARD_
			,TYPE_
			,LEVEL1_
			,LEVEL2_
			,LEVEL3_
			,LEVEL5_
			,LEVEL7_
			,LEVEL8_
			,LEVEL9_
			,LEVEL1PERCENT_
			,LEVEL2PERCENT_
			,LEVEL3PERCENT_
			,LEVEL5PERCENT_
			,LEVEL7PERCENT_
			,LEVEL8PERCENT_
			,LEVEL9PERCENT_
			,NORMAL_
			,NORMALPERCENT_
			,YEAR_
			,MONTH_
			) values (
			#{physicalGrowthCount.id, jdbcType=BIGINT}
			,#{physicalGrowthCount.checkId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.tenantId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.gradeId, jdbcType=VARCHAR}
			,#{physicalGrowthCount.item, jdbcType=VARCHAR}
			,#{physicalGrowthCount.standard, jdbcType=VARCHAR}
			,#{physicalGrowthCount.type, jdbcType=VARCHAR}
			,#{physicalGrowthCount.level1, jdbcType=INTEGER}
			,#{physicalGrowthCount.level2, jdbcType=INTEGER}
			,#{physicalGrowthCount.level3, jdbcType=INTEGER}
			,#{physicalGrowthCount.level5, jdbcType=INTEGER}
			,#{physicalGrowthCount.level7, jdbcType=INTEGER}
			,#{physicalGrowthCount.level8, jdbcType=INTEGER}
			,#{physicalGrowthCount.level9, jdbcType=INTEGER}
			,#{physicalGrowthCount.level1Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level2Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level3Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level5Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level7Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level8Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.level9Percent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.normal, jdbcType=INTEGER}
			,#{physicalGrowthCount.normalPercent, jdbcType=DOUBLE}
			,#{physicalGrowthCount.year, jdbcType=INTEGER}
			,#{physicalGrowthCount.month, jdbcType=INTEGER}
			)
		</foreach>
		SELECT * FROM dual
	</insert>


	<delete id="deletePhysicalGrowthCountById" parameterType="long">
		delete
		from HEALTH_PHYSICAL_GROWTH_COUNT
		where ID_ = #{id}
	</delete>


	<delete id="deletePhysicalGrowthCountByCheckId"
		parameterType="string">
		delete from HEALTH_PHYSICAL_GROWTH_COUNT
		where
		CHECKID_ =
		#{checkId}
	</delete>


	<delete id="deletePhysicalGrowthCount"
		parameterType="com.glaf.heathcare.query.PhysicalGrowthCountQuery">
		delete from HEALTH_PHYSICAL_GROWTH_COUNT
		where TENANTID_
		= #{tenantId}
		and TYPE_ = #{type}
		and YEAR_ = #{year}
		and MONTH_ =
		#{month}
	</delete>


	<select id="getPhysicalGrowthCountById" parameterType="long"
		resultMap="physicalGrowthCountResultMap">
		select * from HEALTH_PHYSICAL_GROWTH_COUNT where ID_ = #{id}
	</select>


	<select id="getPhysicalGrowthCounts"
		parameterType="com.glaf.heathcare.query.PhysicalGrowthCountQuery"
		resultMap="physicalGrowthCountResultMap">
		select distinct E.*
		<include refid="selectPhysicalGrowthCountsSql" />
		<choose>
			<when test="orderBy != null">
				order by ${orderBy}
			</when>
			<otherwise>
				order by E.ID_ desc
			</otherwise>
		</choose>
	</select>


	<select id="getPhysicalGrowthCountCount"
		parameterType="com.glaf.heathcare.query.PhysicalGrowthCountQuery"
		resultType="int">
		select count(*)
		<include refid="selectPhysicalGrowthCountsSql" />
	</select>


	<sql id="selectPhysicalGrowthCountsSql">

		from HEALTH_PHYSICAL_GROWTH_COUNT E

		<where>
			1 = 1

			<if test="checkId != null and checkId != '' ">
				and E.CHECKID_ = #{checkId}
			</if>

			<if test="checkIds != null and checkIds.size() &gt; 0">
				and E.CHECKID_ IN
				<foreach item="x_checkId" index="index"
					collection="checkIds" open="(" separator="," close=")">
					#{x_checkId}
				</foreach>
			</if>

			<if test="tenantId != null and tenantId != '' ">
				and E.TENANTID_ = #{tenantId}
			</if>

			<if test="tenantIds != null and tenantIds.size() &gt; 0">
				and E.TENANTID_ IN
				<foreach item="x_tenantId" index="index"
					collection="tenantIds" open="(" separator="," close=")">
					#{x_tenantId}
				</foreach>
			</if>

			<if test="gradeId != null and gradeId != '' ">
				and E.GRADEID_ = #{gradeId}
			</if>

			<if test="gradeIds != null and gradeIds.size() &gt; 0">
				and E.GRADEID_ IN
				<foreach item="x_gradeId" index="index"
					collection="gradeIds" open="(" separator="," close=")">
					#{x_gradeId}
				</foreach>
			</if>

			<if test="standard != null and standard != '' ">
				and E.STANDARD_ = #{standard}
			</if>

			<if test="type != null and type != '' ">
				and E.TYPE_ = #{type}
			</if>

			<if test="year != null">
				and E.YEAR_ = #{year}
			</if>

			<if test="month != null">
				and E.MONTH_ = #{month}
			</if>
		</where>
	</sql>

</mapper>